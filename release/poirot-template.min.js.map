{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/template.js"],"names":[],"mappings":"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","file":"poirot-template.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @module template\n */\n\n/**\n * The standard DOM HTMLElement.\n * @external {HTMLElement}\n * @class\n * @see https://developer.mozilla.org/en/docs/Web/API/HTMLElement\n */\n\n/**\n * The standard DOM document.\n * @external {Document}\n * @class\n * @see https://developer.mozilla.org/en/docs/Web/API/Document\n */\n\n'use strict';\n\n\n/**\n * @param {string|string[]} html See {@link Template}\n * @param {Array.<object[]>} bindings See {@link Template}\n * @returns {function} A bound instance of {@link Template#render}, which can be\n *   injected by invoking with values accordingly.\n * @alias module:template\n */\nvar TemplateModule = function(html, bindings) {\n  return Template.prototype.render.bind(new Template(html, bindings));\n};\n\nvar BLOCK_OPEN = '#'\n  , BLOCK_CLOSE = '/'\n  , FUNCTION = '!'\n  , FRAGMENT = 'F'\n  , ESCAPED = ''\n  , LITERAL = 'L'\n  , NUMERAL = 'N';\n\nmodule.exports = TemplateModule;\n\n/**\n * Template type tags, used by the poirot compiler when generating injection\n * definitions.\n *\n * @property {string} BLOCK_OPEN\n * @property {string} BLOCK_CLOSE\n * @property {string} FUNCTION\n * @property {string} FRAGMENT\n * @property {string} ESCAPED\n * @property {string} LITERAL\n */\nmodule.exports.TYPE = {\n  BLOCK_OPEN: BLOCK_OPEN,\n  BLOCK_CLOSE: BLOCK_CLOSE,\n  FUNCTION: FUNCTION,\n  FRAGMENT: FRAGMENT,\n  ESCAPED: ESCAPED,\n  LITERAL: LITERAL,\n  NUMERAL: NUMERAL\n};\n\n\n/**\n * Delegate to document.createElement(). Replace to substitute\n * another element creation method, e.g. to use jsdom in Node.\n *\n * @param {string} nodeName\n * @returns {HTMLElement}\n * @private\n */\nvar createElement = function(nodeName) {\n  // jshint browser: true\n  return document.createElement(nodeName);\n};\n\n/**\n * Delegate to document.createTextNode(). Replace to substitute\n * another element creation method, e.g. to use jsdom in Node.\n *\n * @param {string} text\n * @returns {Text}\n * @private\n */\nvar createTextNode = function(text) {\n  // jshint browser: true\n  return document.createTextNode(text);\n};\n\n/**\n * Provide a document, which will be used to create {@link HTMLElement}s. Normally\n * this binds to\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Window.document window.document}\n * without interference, but to use\n * {@link https://github.com/tmpvar/jsdom jsdom}\n * (in Node, duh), provide the jsdom document instead.\n *\n * @param {Document} doc\n */\nTemplateModule.setDocument = function(doc) {\n  createElement = doc.createElement.bind(doc);\n  createTextNode = doc.createTextNode.bind(doc);\n};\n\nvar renderFunctions = {};\n\n/**\n * @param {string} code\n * @returns {function}\n */\nTemplateModule.getHandler = function(code) {\n  return renderFunctions[code];\n};\n\n/**\n * @param {string} code\n * @param {function} handler\n * @returns {TemplateModule} Returns the module object for chaining\n */\nTemplateModule.registerHandler = function(code, handler) {\n  if (renderFunctions[code] !== undefined) {\n    throw 'A handler for template code ' + code + ' already exists';\n  }\n  renderFunctions[code] = handler;\n  return this;\n};\n\n\n(function _initHandlers() {\n  var registerHandler = TemplateModule.registerHandler;\n  registerHandler(FUNCTION, function(target, value, isAttr) {\n    if (isAttr) {\n      target.value = value;\n    } else {\n      // This is not intended usage, but let's do SOMETHING, at least.\n      renderFunctions[ESCAPED](target, value(), false);\n    }\n  });\n\n  registerHandler(ESCAPED, function(target, value, isAttr) {\n    if (isAttr) {\n      target.value = value;\n    } else {\n      if (target.childNodes.length === 0) {\n        target.appendChild(createTextNode(value));\n      } else {\n        target.firstChild.nodeValue = value;\n      }\n    }\n  });\n\n  registerHandler(LITERAL, function(target, value, isAttr) {\n    if (isAttr) {\n      target.value = value;\n    } else {\n      target.innerHTML = value;\n    }\n  });\n\n  registerHandler(NUMERAL, function(target, value, isAttr) {\n    var v = isNaN(value) ? 'NaN' : value;\n    if (isAttr) {\n      target.value = v;\n    } else {\n      target.innerHTML = v;\n    }\n  });\n\n  registerHandler(FRAGMENT, function(target, value, isAttr) {\n    var v = isNaN(value) ? 'NaN' : value;\n    if (isAttr) {\n      target.value = v;\n    } else {\n      target.innerHTML = v;\n    }\n  });\n})();\n\n\n/**\n * Poirot runtime template class.\n *\n * Poirot templates are created by the poirot system itself. The parameters are\n * convoluted; fortunately you needn't worry. About the only thing you should\n * need to care about with the template class is the\n * [Template.render()]{@link Template#render} method.\n *\n * @param {Array.<object[]>} bindingDefs\n * @param {string|string[]} template\n * @param {string} [blockExpr=null]\n * @param {HTMLElement} [root=null]\n * @constructor\n */\nfunction Template(bindingDefs, template, blockExpr, root) {\n  var self = this;\n  /** {Array.<object[]> */\n  self.references = bindingDefs;\n  /** {string|string[]} */\n  self.template = template;\n\n  if (root === undefined && typeof(blockExpr) === 'object') {\n    root = blockExpr;\n    blockExpr = undefined;\n  }\n\n  /**\n   * @private\n   * @type {string}\n   */\n  self.blockExpr = blockExpr;\n\n  if (root) {\n    self.root = root;\n  } else {\n    var div = createElement('div');\n    div.innerHTML = typeof(template) === 'string' ?\n      template : template.join('data-poirot');\n    self.root = div.firstChild;\n  }\n\n  /**\n   * @private\n   * @type {object}\n   */\n  self.bindings = {};\n  /**\n   * @private\n   * @type {Template[]}\n   */\n  self.children = [];\n\n  self.walk(this.root, bindingDefs.slice(0));\n}\nTemplateModule.Template = Template;\n\n/**\n * @private\n * @returns {Template}\n */\nTemplate.prototype.clone = function() {\n  var self = this;\n  return new Template(\n    self.references,\n    self.template,\n    self.root.cloneNode(true));\n};\n/**\n * @private\n * @returns {Template}\n */\nTemplate.prototype.cloneSub = function() {\n  var self = this;\n  return new Template(\n    self.references,\n    self.template,\n    self.root.firstChild.cloneNode(true));\n};\n\n\n/**\n * @param {Element} el\n * @param {Array.<object[]>} bindingDefs\n * @private\n */\nTemplate.prototype.walk = function(el, bindingDefs) {\n  if (bindingDefs.length === 0 || el.nodeName === '#text') {\n    return;\n  }\n\n  var self = this, poirot = 'data-poirot';\n  if (el.hasAttribute(poirot)) {\n    //el.removeAttribute(poirot);\n    self.bindNode(el, bindingDefs.shift());\n  }\n\n  if (!el.hasAttribute(poirot+'-sub')) {\n    var i, childLen = el.childNodes.length;\n    for (i = 0; i < childLen; i++) {\n      self.walk(el.childNodes[i], bindingDefs);\n    }\n  }\n};\n\n\n/**\n * @private\n * @param defn\n * @param {HTMLElement} target\n * @returns {Function}\n */\nvar renderIterSubTemplate = function(defn, target) {\n  var arr = defn.blockExpr.split(' ')\n    , from = arr[0]\n    , as = arr[1];\n  return function(values) {\n    var k, res, idx\n      , values$ = {}\n      , src = values[from];\n    if (src === undefined) {\n      return;\n    }\n    var srclen = src.length\n      , node = target.firstChild\n      , next = node ? node.nextSibling : null;\n    while (next) {\n      target.removeChild(node);\n    }\n\n    for (k in values) { // jshint ignore:line\n      values$[k] = values[k];\n    }\n    for (idx = 0; idx < srclen; ++idx) {\n      values$[as] = src[idx];\n      res = defn.cloneSub().render(values$);\n      target.appendChild(res);\n    }\n  };\n};\n\n/**\n * @param {Element} el\n * @param {object[]} defns\n * @private\n */\nTemplate.prototype.bindNode = function(el, defns) {\n  var self = this, i, defn;\n  for (i = defns.length - 1; i >= 0; --i) {\n    defn = defns[i];\n    if (defn instanceof Template) {\n      self.children.push({\n        template: defn,\n        render: renderIterSubTemplate(defn, el)\n      });\n\n    } else {\n      if (!(defn.key in self.bindings)) {\n        self.bindings[defn.key] = [];\n      }\n      this.bindings[defn.key].push(defn);\n      defn._target = defn.at === undefined ? el : el.getAttributeNode(defn.at);\n      defn._render = renderFunctions[defn.tp];\n    }\n  }\n};\n\n\n/**\n * @param {Object.<string,*>} values Hash of {name: value} to inject into the\n *                                   template.\n * @returns {HTMLElement} An {@link HTMLElement} with the values injected.\n */\nTemplate.prototype.render = function(values) { // jshint ignore:line\n  var self = this, key, i, defn, defns\n    , children = self.children\n    , bindings = self.bindings;\n  for (key in bindings) {      // jshint ignore:line\n    var parts = key.split('.')\n      , plen = parts.length\n      , subv = values;\n    for (i = 0; i < plen && subv !== undefined; ++i) {\n      subv = subv[parts[i]];\n    }\n    if (subv !== undefined) {\n      defns = bindings[key];\n      for (i = defns.length-1; i >= 0; --i) {\n        defn = defns[i];\n        try {\n          defn._render(defn._target, subv, defn.at);\n        } catch (e) {\n          console.error('Failed to render value:', subv, e);\n          console.trace();\n        }\n      }\n    }\n  }\n\n  for (i = children.length - 1; i >= 0; --i) {\n    children[i].render(values);\n  }\n\n  return self.root;\n};\n"],"sourceRoot":"/source/"}